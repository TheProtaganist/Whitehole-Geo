/*
 * Copyright (C) 2022 Whitehole Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package whitehole.ai;

import whitehole.editor.GalaxyEditorForm;
import whitehole.math.Vec3f;
import java.util.*;

/**
 * CommandExecutorExample demonstrates how to use the CommandExecutor system
 * to apply AI-generated transformations to galaxy objects.
 */
public class CommandExecutorExample {
    
    /**
     * Example of how to execute AI transformations in the context of GalaxyEditorForm.
     * This method would typically be called from an AI command processing system.
     * 
     * @param editorForm The galaxy editor form
     * @param aiCommand The natural language command from the user
     * @param transformations The transformations generated by the AI system
     */
    public static void executeAICommand(GalaxyEditorForm editorForm, 
                                       String aiCommand,
                                       List<ObjectTransformation> transformations) {
        
        System.out.println("Executing AI command: " + aiCommand);
        System.out.println("Number of transformations: " + transformations.size());
        
        // Use the integration helper to execute the command
        CommandExecutorIntegration.ExecutionSummary summary = 
            CommandExecutorIntegration.executeAICommand(editorForm, transformations, aiCommand);
        
        // Provide user feedback
        System.out.println("Execution result: " + summary.getUserFeedback());
        
        if (summary.hasErrors()) {
            System.err.println("Errors occurred:");
            for (String error : summary.getErrors()) {
                System.err.println("  - " + error);
            }
        }
        
        if (summary.hasWarnings()) {
            System.out.println("Warnings:");
            for (String warning : summary.getWarnings()) {
                System.out.println("  - " + warning);
            }
        }
    }
    
    /**
     * Example of creating transformations for common AI commands.
     */
    public static List<ObjectTransformation> createExampleTransformations() {
        List<ObjectTransformation> transformations = new ArrayList<>();
        
        // Example 1: Move object 5 units to the right
        transformations.add(ObjectTransformation.translate(
            123, // object ID
            new Vec3f(5, 0, 0), // delta
            "Move object 5 units to the right"
        ));
        
        // Example 2: Rotate object 90 degrees around Y axis
        transformations.add(ObjectTransformation.rotate(
            123, // object ID
            new Vec3f(0, 90, 0), // rotation delta
            "Rotate object 90 degrees around Y axis"
        ));
        
        // Example 3: Scale object by 2x
        transformations.add(ObjectTransformation.scale(
            123, // object ID
            new Vec3f(2, 2, 2), // scale factor
            "Scale object by 2x"
        ));
        
        // Example 4: Set object position to specific coordinates
        transformations.add(new ObjectTransformation.Builder()
            .setObjectId(456)
            .setType(ObjectTransformation.TransformationType.SET_POSITION)
            .setVectorValue(new Vec3f(100, 200, 300))
            .setDescription("Set object position to (100, 200, 300)")
            .build()
        );
        
        // Example 5: Change object properties
        Map<String, Object> properties = new HashMap<>();
        properties.put("Obj_arg0", 42);
        properties.put("SW_APPEAR", 1);
        properties.put("GroupId", (short) 5);
        
        transformations.add(ObjectTransformation.changeProperty(
            789, // object ID
            properties,
            "Set object properties: Obj_arg0=42, SW_APPEAR=1, GroupId=5"
        ));
        
        return transformations;
    }
    
    /**
     * Example of validating transformations before execution.
     */
    public static void validateTransformationsExample(GalaxyEditorForm editorForm,
                                                     List<ObjectTransformation> transformations) {
        
        System.out.println("Validating " + transformations.size() + " transformations...");
        
        CommandExecutorIntegration.ValidationSummary validation = 
            CommandExecutorIntegration.validateTransformations(editorForm, transformations);
        
        if (validation.isAllValid()) {
            System.out.println("All transformations are valid!");
        } else {
            System.out.println("Validation results:");
            System.out.println("  Valid: " + validation.getValidCount());
            System.out.println("  Invalid: " + validation.getInvalidCount());
            
            if (validation.hasErrors()) {
                System.err.println("  Errors: " + validation.getErrors());
            }
            
            if (validation.hasWarnings()) {
                System.out.println("  Warnings: " + validation.getWarnings());
            }
        }
    }
    
    /**
     * Example of handling different transformation types.
     */
    public static void demonstrateTransformationTypes() {
        System.out.println("=== Transformation Types Demo ===");
        
        // Translation (relative movement)
        ObjectTransformation translation = ObjectTransformation.translate(
            1, new Vec3f(10, 0, 0), "Move 10 units right"
        );
        System.out.println("Translation: " + translation.getDescription());
        
        // Absolute position setting
        ObjectTransformation setPosition = new ObjectTransformation.Builder()
            .setObjectId(1)
            .setType(ObjectTransformation.TransformationType.SET_POSITION)
            .setVectorValue(new Vec3f(100, 50, 200))
            .setDescription("Set position to (100, 50, 200)")
            .build();
        System.out.println("Set Position: " + setPosition.getDescription());
        
        // Rotation (relative)
        ObjectTransformation rotation = ObjectTransformation.rotate(
            1, new Vec3f(0, 45, 0), "Rotate 45 degrees around Y"
        );
        System.out.println("Rotation: " + rotation.getDescription());
        
        // Absolute rotation setting
        ObjectTransformation setRotation = new ObjectTransformation.Builder()
            .setObjectId(1)
            .setType(ObjectTransformation.TransformationType.SET_ROTATION)
            .setVectorValue(new Vec3f(0, 180, 0))
            .setDescription("Set rotation to face opposite direction")
            .build();
        System.out.println("Set Rotation: " + setRotation.getDescription());
        
        // Scaling (multiplicative)
        ObjectTransformation scaling = ObjectTransformation.scale(
            1, new Vec3f(1.5f, 1.5f, 1.5f), "Scale by 1.5x"
        );
        System.out.println("Scaling: " + scaling.getDescription());
        
        // Absolute scale setting
        ObjectTransformation setScale = new ObjectTransformation.Builder()
            .setObjectId(1)
            .setType(ObjectTransformation.TransformationType.SET_SCALE)
            .setVectorValue(new Vec3f(2, 2, 2))
            .setDescription("Set scale to 2x")
            .build();
        System.out.println("Set Scale: " + setScale.getDescription());
        
        // Property changes
        Map<String, Object> props = new HashMap<>();
        props.put("Obj_arg0", 100);
        props.put("name", "ModifiedObject");
        ObjectTransformation propertyChange = ObjectTransformation.changeProperty(
            1, props, "Update object properties"
        );
        System.out.println("Property Change: " + propertyChange.getDescription());
    }
    
    /**
     * Example of batch operations with error handling.
     */
    public static void demonstrateBatchOperations(GalaxyEditorForm editorForm) {
        System.out.println("=== Batch Operations Demo ===");
        
        List<ObjectTransformation> batchTransformations = new ArrayList<>();
        
        // Create transformations for multiple objects
        for (int i = 1; i <= 5; i++) {
            batchTransformations.add(ObjectTransformation.translate(
                i, new Vec3f(i * 10, 0, 0), "Move object " + i + " to position " + (i * 10)
            ));
        }
        
        // Add some property changes
        for (int i = 1; i <= 3; i++) {
            Map<String, Object> props = new HashMap<>();
            props.put("Obj_arg0", i * 10);
            batchTransformations.add(ObjectTransformation.changeProperty(
                i, props, "Set Obj_arg0 to " + (i * 10) + " for object " + i
            ));
        }
        
        System.out.println("Created " + batchTransformations.size() + " transformations for batch operation");
        
        // Execute the batch
        CommandExecutorIntegration.ExecutionSummary result = 
            CommandExecutorIntegration.executeAICommand(
                editorForm, 
                batchTransformations, 
                "Batch operation: arrange objects in a line and set properties"
            );
        
        System.out.println("Batch execution result: " + result.getUserFeedback());
        
        if (result.getSuccessCount() != result.getTotalCount()) {
            System.out.println("Some operations failed - this is normal if objects don't exist");
        }
    }
    
    /**
     * Main method for running examples (for testing purposes).
     */
    public static void main(String[] args) {
        System.out.println("=== CommandExecutor Examples ===");
        
        // Demonstrate transformation types
        demonstrateTransformationTypes();
        System.out.println();
        
        // Create example transformations
        List<ObjectTransformation> examples = createExampleTransformations();
        System.out.println("Created " + examples.size() + " example transformations");
        
        System.out.println("\nNote: To run full examples with GalaxyEditorForm, ");
        System.out.println("call the methods from within the Whitehole Geo application context.");
    }
}